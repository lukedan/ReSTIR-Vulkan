#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

//-------------------------------------------------------------------------------------------------
// Default raygen for picking objects in the scene
// -
//-------------------------------------------------------------------------------------------------


#include "sampling.glsl"
#include "share.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0) buffer _resultPick
{
  PerRayData_pick resultPick;
};
layout(binding = 2, set = 0) uniform UBOscene
{
  Scene s;
}
ubo;

layout(push_constant) uniform Constants
{
  float pickX;
  float pickY;
};

layout(location = 0) rayPayloadNV PerRayData_pick prd;


void main()
{
  const vec2 pixelCenter = vec2(pickX, pickY);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  mat4  viewInverse = inverse(ubo.s.model);
  mat4  projInverse = inverse(ubo.s.projection);
  vec4  origin      = viewInverse * vec4(0, 0, 0, 1);
  vec4  target      = projInverse * vec4(d.x, d.y, 1, 1);
  vec4  direction   = viewInverse * vec4(normalize(target.xyz), 0);
  uint  rayFlags    = gl_RayFlagsOpaqueNV;
  uint  cullMask    = 0xff;
  float tmin        = 0.001;
  float tmax        = 10000.0;

  prd.worldPos     = vec4(0.f);
  prd.barycentrics = vec4(0.f);
  prd.instanceID   = 0;
  prd.primitiveID  = 0;

  traceNV(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, origin.xyz,
          tmin, direction.xyz, tmax, 0 /*payload*/);

  resultPick.worldPos     = prd.worldPos;
  resultPick.barycentrics = prd.barycentrics;
  resultPick.instanceID   = prd.instanceID;
  resultPick.primitiveID  = prd.primitiveID;
}
