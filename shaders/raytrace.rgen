#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

//-------------------------------------------------------------------------------------------------
// Default ray generation
// - Will sample the pixel n-number of time: samples
// - Will jitter the camera in sub-pixel to do anitaliasing
//-------------------------------------------------------------------------------------------------


#include "binding.h"
#include "sampling.glsl"
#include "share.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;  // Scene BVH
layout(binding = 1, rgba32f, set = 0) uniform image2D image;              // In/Out rendering image
layout(binding = B_SCENE, set = 1) uniform UBOscene  // Scene info: camera matrices and more. See share.h
{
  Scene s;
}
ubo;

//------------------------------------
// Push constant from the application
//------------------------------------
layout(push_constant) uniform Constants
{
  int   frame;         // Current frame
  int   maxDepth;      // Trace depth
  float maxRayLenght;  // Trace depth
  int   samples;       // Number of samples per pixel
  float environmentIntensityFactor;
  float fireflyClampThreshold;
}
pushC;

// Payload
//layout(location = 0) rayPayloadNV PerRayData_raytrace prd;

layout(location = 0) rayPayloadNV RadianceHitInfo payload;


//-------------------------------
// Ray generation
//-------------------------------
void main()
{
  vec3 hitValues = vec3(0);
  for(int smpl = 0; smpl < pushC.samples; ++smpl)
  {
    // Initialize the random number
    uint  seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, pushC.frame * pushC.samples + smpl);
    float r1   = rnd(seed);
    float r2   = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
    vec2 subpixel_jitter = (pushC.frame * pushC.samples + smpl) == 0 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5) + subpixel_jitter;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    // Initialize ray information
    mat4  viewInverse = inverse(ubo.s.model);
    mat4  projInverse = inverse(ubo.s.projection);
    vec4  origin      = viewInverse * vec4(0, 0, 0, 1);
    vec4  target      = projInverse * vec4(d.x, d.y, 1, 1);
    vec4  direction   = viewInverse * vec4(normalize(target.xyz), 0);
    float Tmin        = 0.0;
    float Tmax        = pushC.maxRayLenght;

    // Payload
    payload.flags        = FLAG_FIRST_PATH_SEGMENT;
    payload.rayOrigin    = origin.xyz;
    payload.rayDir       = direction.xyz;
    payload.contribution = vec3(0., 0., 0.);
    payload.weight       = vec3(1., 1., 1.);
    payload.last_pdf     = -1.f;
    payload.seed         = seed;

    for(int depth = 0; depth < pushC.maxDepth; depth++)
    {
      traceNV(topLevelAS,         // acceleration structure
              gl_RayFlagsNoneNV,  // rayFlags
              0xFF,               // cullMask
              0,                  // sbtRecordOffset
              0,                  // sbtRecordStride
              0,                  // missIndex
              origin.xyz,         // ray origin
              Tmin,               // ray min range
              direction.xyz,      // ray direction
              Tmax,               // ray max range
              0                   // payload layout(location = 0)
      );

      hitValues += payload.contribution;

      {
        float lum = dot(hitValues, vec3(0.212671f, 0.715160f, 0.072169f));
        if(lum > pushC.fireflyClampThreshold)
          hitValues *= pushC.fireflyClampThreshold / lum;
      }

      // Russian roulette termination
      if(!has_flag(payload.flags, FLAG_FIRST_PATH_SEGMENT))
      {
        float pcont = max(payload.weight.x, max(payload.weight.y, payload.weight.z));
        if(rnd(seed) >= pcont)
          break;
        payload.weight /= pcont;
      }

      if(has_flag(payload.flags, FLAG_DONE))
        break;

      origin.xyz    = payload.rayOrigin;
      direction.xyz = payload.rayDir;
      remove_flag(payload.flags, FLAG_FIRST_PATH_SEGMENT);
    }
  }

  // Average result
  hitValues = hitValues / pushC.samples;

  // Do accumulation over time
  if(pushC.frame > 0)
  {
    float a         = 1.0f / float(pushC.frame);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDNV.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(mix(old_color, hitValues, a), 1.f));
  }
  else
  {
    // First frame, replace value in the buffer
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValues, 1.f));
  }
}
