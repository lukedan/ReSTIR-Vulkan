#version 450

#include "include/reservoir.glsl"
#include "include/restirUtils.glsl"

layout (local_size_x = SW_VISIBILITY_TEST_GROUP_SIZE_X, local_size_y = SW_VISIBILITY_TEST_GROUP_SIZE_Y, local_size_z = 1) in;

layout (binding = 0) uniform Uniforms {
	RestirUniforms uniforms;
};

layout(push_constant) uniform pushBlock{
	int iter;
} constant;

layout (binding = 1) uniform sampler2D uniWorldPosition;
layout (binding = 2) uniform sampler2D uniAlbedo;
layout (binding = 3) uniform sampler2D uniNormal;
layout (binding = 4) uniform sampler2D uniMaterialProperties;
layout (binding = 5) uniform sampler2D uniDepth;

layout (binding = 6) buffer Reservoirs {
	Reservoir reservoirs[];
};
layout (binding = 7) buffer Resultreservoirs {
	Reservoir resultReservoirs[];
};


void main() {
	uvec2 pixelCoord = gl_GlobalInvocationID.xy;
	if (any(greaterThanEqual(pixelCoord, uniforms.screenSize))) {
		return;
	}

	vec3 albedo = texelFetch(uniAlbedo, ivec2(pixelCoord), 0).xyz;
	vec3 normal = texelFetch(uniNormal, ivec2(pixelCoord), 0).xyz;
	vec2 roughnessMetallic = texelFetch(uniMaterialProperties, ivec2(pixelCoord), 0).xy;
	vec3 worldPos = texelFetch(uniWorldPosition, ivec2(pixelCoord), 0).xyz;
	float worldDepth = texelFetch(uniDepth, ivec2(pixelCoord), 0).x;

	float albedoLum = luminance(albedo.r, albedo.g, albedo.b);

	uint reservoirIndex = pixelCoord.y * uniforms.screenSize.x + pixelCoord.x;
	Reservoir res = reservoirs[reservoirIndex];

	Rand rand = seedRand(uniforms.frame * 31, pixelCoord.y * 10007 + pixelCoord.x + constant.iter * 345);
	for(int i = 0; i < uniforms.spatialNeighbors; i++)
	{
		ivec2 randNeighbor = ivec2(0, 0);
		
		float angle = randFloat(rand) * 2.0 * M_PI;
		float radius = sqrt(randFloat(rand)) * uniforms.spatialRadius;

		ivec2 randNeighborOffset = ivec2(floor(cos(angle) * radius), floor(sin(angle) * radius));
		randNeighbor.x = clamp(int(pixelCoord.x) + randNeighborOffset.x, 0, int(uniforms.screenSize.x) - 1);
		randNeighbor.y = clamp(int(pixelCoord.y) + randNeighborOffset.y, 0, int(uniforms.screenSize.y) - 1);

		uint randIndex = randNeighbor.y * uniforms.screenSize.x + randNeighbor.x;
		
		// Discard over biased neighbors
		float neighborDepth = texelFetch(uniDepth, ivec2(randNeighbor), 0).x;
		vec3 neighborNor = texelFetch(uniNormal, ivec2(randNeighbor), 0).xyz;

		if (
			abs(neighborDepth - worldDepth) > uniforms.spatialPosThreshold * abs(worldDepth) ||
			dot(neighborNor, normal) < cos(radians(uniforms.spatialNormalThreshold))
		) {
			continue;
		}

		Reservoir randRes = reservoirs[randIndex];
		float newPHats[RESERVOIR_SIZE];

		for(int j = 0; j < RESERVOIR_SIZE; j++)
		{
			float newPHat = evaluatePHat(
				worldPos, randRes.samples[j].position_emissionLum.xyz, uniforms.cameraPos.xyz,
				normal, randRes.samples[j].normal.xyz, randRes.samples[j].normal.w > 0.5f,
				albedoLum, randRes.samples[j].position_emissionLum.w, roughnessMetallic.x, roughnessMetallic.y);
			newPHats[j] = newPHat;
		}
		combineReservoirs(res, randRes, newPHats, rand);
	}
	resultReservoirs[reservoirIndex] = res;
}